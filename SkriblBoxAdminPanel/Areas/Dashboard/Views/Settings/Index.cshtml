@model  BasketWebPanel.ViewModels.SettingsViewModel
@{
    ViewBag.Title = "GeneralSettings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .image-preview-input-instagram input[type=file] {
        position: absolute;
        top: 0;
        right: 0;
        margin: 0;
        padding: 0;
        font-size: 20px;
        cursor: pointer;
        opacity: 0;
        filter: alpha(opacity=0);
    }
</style>
<input id="ImageValue" type="hidden" value="@Model.BannerImage" />
<input id="ImageValueInsta" type="hidden" value="@Model.InstagramImage" />
<div class="right_col" role="main">
    <div class="row">
        <div class="x_panel ">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success" id="success-alert">
                    <button type="button" class="close" data-dismiss="alert">x</button>
                    <strong></strong><span>@TempData["SuccessMessage"]</span>
                </div>
            }
            <div class="alert alert-error" id="error-alert" hidden>
                <button type="button" class="close" data-dismiss="alert">x</button>
                <strong>Error! </strong> <span> </span>
            </div>
            <div class="x_title">
                <h3 class="pull-left">General Settings</h3>
                @*<div class="pull-right">
                        <a href="#" class="btn bg-green">
                            <i class="fa fa-plus-square"></i>
                            Save
                        </a>
                    </div>*@
                <div class="clearfix"></div>
            </div>
            <p>
            </p>
            @using (Ajax.BeginForm("Index", "Settings", new AjaxOptions { OnSuccess = "OnSuccessSettingsUpdation", OnFailure = "OnFailedInsertion", LoadingElementId = "divLoader" }, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="x_content">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3 col-xs-5 " style="text-align:left;">
                                <label class="control-label" for="">Delivery Fee</label>
                                <span class="ico-help" title="Enter the nearby radius"><i class="fa fa-question-circle"></i></span>
                            </div>
                            <div class="col-md-9 col-xs-9 ">
                                @*<input type="text" class="form-control text-box single-line" />*@
                                @Html.TextBoxFor(x => x.DeliveryFee, new { @class = "form-control", placeholder = "Delivery Fee", id = "DeliveryFee" })
                                @Html.ValidationMessageFor(m => m.DeliveryFee, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3 col-xs-5 " style="text-align:left;">
                                <label class="control-label" for="">Currency</label>
                                <span class="ico-help" title="Enter the nearby radius"><i class="fa fa-question-circle"></i></span>
                            </div>
                            <div class="col-md-9 col-xs-9 ">
                                @Html.TextBoxFor(x => x.Currency, new { @class = "form-control", placeholder = "Currency", id = "Currency", @readonly = true })
                                @Html.ValidationMessageFor(m => m.Currency, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3 col-xs-5 " style="text-align:left;">
                                <label class="control-label" for="">Free Delivery Threshold</label>
                                <span class="ico-help" title="Enter the nearby radius"><i class="fa fa-question-circle"></i></span>
                            </div>
                            <div class="col-md-9 col-xs-9 ">
                                @Html.TextBoxFor(x => x.FreeDeliveryThreshold, new { @class = "form-control", placeholder = "Delivery Threshold", id = "FreeDeliveryThreshold" })
                                @Html.ValidationMessageFor(m => m.FreeDeliveryThreshold, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="">
                                <div class="col-md-9" id="EditImage" hidden>
                                    <label>Banner Image</label>
                                    <div class="row">
                                        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                            <img src="@ApiCall.BaseUrl@Model.BannerImage" alt="" width="48" height="48">
                                        </div>
                                    </div>
                                    <button id="btnDeleteImg" title="Delete" onclick="EditDivDeletePic(1)" class="btn btn-danger btn-xs deleteButtons" data-title="Delete" data-productid="8" data-toggle="modal" data-target="#deleteModal"><span class="glyphicon glyphicon-trash"></span></button>
                                    <div hidden id="HasImage1">@Model.BannerImage</div>
                                </div>
                                <div id="UploadImage" hidden>
                                    <div class="col-md-3">
                                        <label>Upload Banner Image</label>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="input-group image-preview" style="margin-bottom:0px">
                                            <input type="text" name="BannerImage" id="txtImageUrl" data-val="true" data-val-required="Please select an image" class="form-control image-preview-filename input-validation-error" readonly> <!-- don't give a name === doesn't send on POST/GET -->
                                            <span class="input-group-btn">
                                                <!-- image-preview-clear button -->
                                                <button type="button" id="clearImage" class="btn btn-default image-preview-clear" onclick="ClearImage(1)" style="display:none;">
                                                    <span class="glyphicon glyphicon-remove"></span> Clear
                                                </button>
                                                <!-- image-preview-input -->
                                                <div class="btn btn-default image-preview-input">
                                                    <span class="glyphicon glyphicon-folder-open"></span>
                                                    <span class="image-preview-input-title">Browse</span>
                                                    <input type="file" accept="image/png, image/jpeg, image/gif" onchange="UploadImage(1)" id="fileInput" name="Image" /> <!-- rename it -->
                                                </div>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.BannerImage, "", new { @class = "text-danger", @Id = "errImageUrl" })
                                    </div>
                                    <!-- /input-group image-preview [TO HERE]-->
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="">
                                <div class="col-md-9" id="EditImageInsta" hidden>
                                    <label>Instagram Image</label>
                                    <div class="row">
                                        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                            <img src="@ApiCall.BaseUrl@Model.InstagramImage" alt="" width="48" height="48">
                                        </div>
                                    </div>
                                    <button id="btnDeleteImg" title="Delete" onclick="EditDivDeletePic(2)" class="btn btn-danger btn-xs deleteButtons" data-title="Delete" data-toggle="modal" data-target="#deleteModal"><span class="glyphicon glyphicon-trash"></span></button>
                                    <div hidden id="HasImage1Insta">@Model.InstagramImage</div>
                                </div>
                                <div id="UploadImageInsta" hidden>
                                    <div class="col-md-3">
                                        <label>Upload Instagram Image</label>
                                    </div>
                                    <div class="col-md-9">
                                        <div id="divImagePreviewInsta" class="input-group" style="margin-bottom:0px">
                                            <input type="text" style="z-index:1000; position:relative" name="InstagramImage" id="txtImageUrlInsta" data-val="true" data-val-required="Please select an image" class="form-control input-validation-error" readonly> <!-- don't give a name === doesn't send on POST/GET -->
                                            <span class="input-group-btn">
                                                <!-- image-preview-clear button -->
                                                <button type="button" id="clearImageInsta" class="btn btn-default" onclick="ClearImage(2)" style="display:none; z-index:1000">
                                                    <span class="glyphicon glyphicon-remove"></span> Clear
                                                </button>
                                                <!-- image-preview-input -->
                                                <div id="divImgPreviewInput" class="btn btn-default image-preview-input-instagram">
                                                    <span class="glyphicon glyphicon-folder-open"></span>
                                                    <span id="spanImagePreviewInputTitle">Browse</span>
                                                    <input hidden type="file" accept="image/png, image/jpeg, image/gif" onchange="UploadImage(2)" id="fileInputInsta" name="Image" style="z-index:10" /> <!-- rename it -->
                                                </div>
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.InstagramImage, "", new { @class = "text-danger", @Id = "errImageUrlInsta" })
                                    </div>
                                    <!-- /input-group image-preview [TO HERE]-->
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row text-right">
                        <button type="submit" class="btn btn-success text-right">Update Settings</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        var closebtn = $('<button/>', {
            type: "button",
            text: 'x',
            id: 'close-previewcustom',
            style: 'font-size: initial;',
        });
        closebtn.attr("class", "close pull-right");

        $('#divImagePreviewInsta').popover({
            trigger: 'manual',
            html: true,
            title: "<strong>Preview</strong>" + $(closebtn)[0].outerHTML,
            content: "There's no image",
            placement: 'bottom'
        });

        setTimeout(
function () {
    if ($('#success-alert') != null) {
        $('#success-alert').slideUp(500, function () {
        });
    }
}, 3000);

        var ImageValue = $("#ImageValue").val();
        var ImageValueInsta = $("#ImageValueInsta").val();
        var editImageValInsta = $("#HasImage1Insta").text();
        var editImageVal = $('#HasImage1').text();
        if (ImageValue == "" || editImageVal == "") {
            $('#EditImage').hide();
            $('#UploadImage').show();
        }
        else {
            $('#EditImage').show();
            $('#UploadImage').hide();
            $("#txtImageUrl").val(editImageVal);
        }

        if (ImageValueInsta == "" || editImageValInsta == "") {
            $('#EditImageInsta').hide();
            $('#UploadImageInsta').show();
        }
        else {
            $('#EditImageInsta').show();
            $('#UploadImageInsta').hide();
            $("#txtImageUrlInsta").val(editImageValInsta);
        }
    });

    function OnResetClick() {
        $("#clearImage").trigger("click");
        ClearValidationErrorMessages();
    }

    function UploadImage(ImageType) { //1 for banner image, 2 for instagram image
        var AllowedFileTypes = ["image/jpeg", "image/png", "image/jpg"];
        var formdata = new FormData(); //FormData object
        var fileInput;
        if (ImageType == 1) {
            fileInput = document.getElementById('fileInput');
        }
        else if (ImageType == 2) {
            fileInput = document.getElementById('fileInputInsta');
        }

        //Iterating through each files selected in fileInput
        var file = fileInput.files[0];
        formdata.append(file.name, file);
        formdata.append('Type', ImageType);

        if (AllowedFileTypes.indexOf(file.type) == -1) {
            if (ImageType == 1) {
                $("#clearImage").trigger("click");
            }
            else if (ImageType == 2) {
                $("#clearImageInsta").trigger("click");
            }
                
            return false;
        }
        else {
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            var url = '@Url.Action("UploadImage", "Settings")'
            xhr.open('POST', url);
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    //alert(xhr.responseText);
                    if (ImageType == 1) {
                        document.getElementById("errImageUrl").innerHTML = '';
                    }
                    else if (ImageType == 2)
                    {
                        document.getElementById("errImageUrlInsta").innerHTML = '';
                    }
                    //$('.field-validation-error').inn.hide();
                }
            }
            return false;
        }
    }

    function ClearImage(ImageType) {
        var params = JSON.stringify({ Type: ImageType });
        var url = '@Url.Action("DeleteImage", "Settings")'
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url + "?type=" + ImageType);
        xhr.send();
        if (ImageType == 1) {
            $("#txtImageUrl").val('');
        }
        else if (ImageType == 2) {
            $("#txtImageUrlInsta").val('');
        }

    }

    function DeleteImageOnEdit(ImageType) {
        var xhr = new XMLHttpRequest();
        var url = '@Url.Action("DeleteImage", "Settings")'
        xhr.open('GET', url + "?type=" + ImageType);
        xhr.send();
        if (ImageType == 1) {
            $("#txtImageUrl").val('');
        }
        else if (ImageType == 2) {
            $("#txtImageUrlInsta").val('');
        }
    }



    function EditDivDeletePic(ImageType) {
        if (ImageType == 1) {
            $('#EditImage').hide();
            $('#UploadImage').show();
        }
        else if (ImageType == 2) {
            $('#EditImageInsta').hide();
            $('#UploadImageInsta').show();
        }

        DeleteImageOnEdit(ImageType);
    }


    function OnSuccessSettingsUpdation() {
        window.location.href = "@Url.Action("Index", "Settings")";
    }



    $('#clearImageInsta').click(function () {
        $('#divImagePreviewInsta').attr("data-content", "").popover('hide');
        $('#txtImageUrlInsta').val("");
        $('#clearImageInsta').hide();
        $('#divImgPreviewInput input:file').val("");
        $("#spanImagePreviewInputTitle").text("Browse");
    });

    $(".image-preview-input-instagram input:file").change(function () {
        var img = $('<img/>', {
            id: 'dynamic',
            width: 250,
            height: 200
        });
        var file = this.files[0];
        var reader = new FileReader();
        // Set preview image into the popover data-content
        reader.onload = function (e) {
            $("#spanImagePreviewInputTitle").text("Change");
            $("#clearImageInsta").show();
            $("#txtImageUrlInsta").val(file.name);
            img.attr('src', e.target.result);
            $("#InstagramImageFileName").attr('readonly', true);
            $("#divImagePreviewInsta").attr("data-content", $(img)[0].outerHTML).popover("show");
        }
        reader.readAsDataURL(file);
    });


    $(document).on('click', '#close-previewcustom', function () {
        $('#divImagePreviewInsta').popover('hide');
        // Hover befor close the preview
        $('#divImagePreviewInsta').hover(
            function () {
                $('#divImagePreviewInsta').popover('show');
            },
             function () {
                 $('#divImagePreviewInsta').popover('hide');
             }
        );
    });

</script>
